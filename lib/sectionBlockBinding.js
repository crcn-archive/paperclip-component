// Generated by CoffeeScript 1.7.1
(function() {
  var SectionBlockBinding, pc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pc = require("paperclip");


  /*
   Does a few things - defines sections, and uses them. For example:
  
   defining:
  
   {{#section:"list"}}
  
    {{ 
      view: {
        type: "list",
        source: students
      }
    }}
  
   {{/}}
  
   using:
  
   {{ section: sections.list }}
   */

  SectionBlockBinding = (function(_super) {
    __extends(SectionBlockBinding, _super);

    function SectionBlockBinding() {
      this._onChange = __bind(this._onChange, this);
      return SectionBlockBinding.__super__.constructor.apply(this, arguments);
    }


    /*
     called when needed, otherwise content is never created.
     */

    SectionBlockBinding.prototype.render = function() {
      this._content = this.contentTemplate.bind(this.context);
      return this._content.section.render();
    };


    /*
     */

    SectionBlockBinding.prototype.remove = function() {
      var _ref;
      return (_ref = this._content) != null ? _ref.remove() : void 0;
    };


    /*
     */

    SectionBlockBinding.prototype._onChange = function(value) {
      if (this.contentTemplate) {
        return this._changeDefinition(value);
      } else {
        return this._changeContent(value);
      }
    };


    /*
     */

    SectionBlockBinding.prototype.unbind = function() {
      var _ref;
      SectionBlockBinding.__super__.unbind.call(this);
      return (_ref = this._content) != null ? _ref.unbind() : void 0;
    };


    /*
     */

    SectionBlockBinding.prototype._changeDefinition = function(value) {
      return this.context.set("sections." + value, this);
    };


    /*
     */

    SectionBlockBinding.prototype._changeContent = function(value) {
      this.section.removeAll();
      if (value) {
        return this.section.append(value.render());
      }
    };

    return SectionBlockBinding;

  })(pc.BaseBlockBinding);

  module.exports = SectionBlockBinding;

}).call(this);

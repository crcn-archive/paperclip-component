// Generated by CoffeeScript 1.6.2
(function() {
  var SectionBlockBinding, pc, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pc = require("paperclip");

  /*
   Does a few things - defines sections, and uses them. For example:
  
   defining:
  
   {{#section:"list"}}
  
    {{ 
      view: {
        type: "list",
        source: students
      }
    }}
  
   {{/}}
  
   using:
  
   {{ section: sections.list }}
  */


  SectionBlockBinding = (function(_super) {
    __extends(SectionBlockBinding, _super);

    function SectionBlockBinding() {
      this._onChange = __bind(this._onChange, this);      _ref = SectionBlockBinding.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
     called when needed, otherwise content is never created.
    */


    SectionBlockBinding.prototype.createFragment = function() {
      if (!this._content) {
        this._content = this.contentTemplate.bind(this.context);
      }
      return this._content.section.toFragment();
    };

    /*
    */


    SectionBlockBinding.prototype._onChange = function(value) {
      console.log("DEN");
      if (this.contentTemplate) {
        return this._changeDefinition(value);
      } else {
        return this._changeContent(value);
      }
    };

    /*
    */


    SectionBlockBinding.prototype._changeDefinition = function(value) {
      return this.context.set("sections." + value, this);
    };

    /*
    */


    SectionBlockBinding.prototype._changeContent = function(value) {
      this.section.removeAll();
      if (value) {
        return this.section.append(value.createFragment());
      }
    };

    return SectionBlockBinding;

  })(pc.BaseBlockBinding);

  module.exports = SectionBlockBinding;

}).call(this);
